/*
* ============LICENSE_START=======================================================
* ONAP : DATALAKE
* ================================================================================
* Copyright 2018 China Mobile
*=================================================================================
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* ============LICENSE_END=========================================================
*/

package org.onap.datalake.feeder.service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.apache.commons.lang3.tuple.Pair;
import org.bson.Document;

import org.json.JSONException;
import org.json.JSONObject;
import org.json.XML;

import org.onap.datalake.feeder.config.ApplicationConfiguration;
import org.onap.datalake.feeder.domain.Topic;
import org.onap.datalake.feeder.enumeration.DataFormat;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

/**
 * Service to use MongoDB
 * 
 * @author Guobiao Mo
 *
 */
@Service
public class MongodbService {

	private final Logger log = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private ApplicationConfiguration config;

	@Autowired
	private TopicService topicService;

	private MongoDatabase database;
	private MongoClient mongoClient;
	private Map<String, MongoCollection<Document>> mongoCollectionMap = new HashMap<>();
	private Map<String, Topic> topicMap = new HashMap<>(); //TODO if a topic is updated, this map needs too

	private ObjectMapper yamlReader;

	@PostConstruct
	private void init() {
		mongoClient = new MongoClient(config.getMongodbHost(), config.getMongodbPort());
		database = mongoClient.getDatabase(config.getMongodbDatabase());

		yamlReader = new ObjectMapper(new YAMLFactory());
	}

	@PreDestroy
	public void cleanUp() {
		mongoClient.close();
	}

	public void saveMessages(String topic, List<Pair<Long, String>> messages) {
		if (messages == null || messages.isEmpty()) {
			return;
		}

		List<Document> docs = new ArrayList<>();

		for (Pair<Long, String> pair : messages) {
			try {
				docs.add(messageToDocument(topic, pair));
			} catch (Exception e) {
				log.error(pair.getRight(), e);
			}
		}

		saveDocuments(topic, docs);
	}

	private Document messageToDocument(String topicStr, Pair<Long, String> pair) throws JSONException, JsonParseException, JsonMappingException, IOException {

		long timestamp = pair.getLeft();
		String text = pair.getRight();

		//TODO for debug, to be remove
		if (!"msgrtr.apinode.metrics.dmaap".equals(topicStr) && !"AAI-EVENT".equals(topicStr) && !"unauthenticated.DCAE_CL_OUTPUT".equals(topicStr) && !"unauthenticated.SEC_FAULT_OUTPUT".equals(topicStr)) {
			log.debug("{} ={}", topicStr, text);
		}
		Topic topic = topicMap.computeIfAbsent(topicStr, k -> {
			return topicService.getEffectiveTopic(topicStr);
		});

		boolean storeRaw = topic.getSaveRaw();

		String json = null;//topic.toJson(text);		

		DataFormat dataFormat = topic.getDataFormat();

		switch (dataFormat) {
		case JSON:
			json = text;
			break;
		case XML:
			JSONObject xmlJSONObj = XML.toJSONObject(text);
			json = xmlJSONObj.toString();
			break;
		case YAML:
			Object obj = yamlReader.readValue(text, Object.class);
			ObjectMapper jsonWriter = new ObjectMapper();
			json = jsonWriter.writeValueAsString(obj);
			break;
		default:
			storeRaw = true;
			break;
		}

		Document doc;
		if (json == null) {
			doc = new Document();
		} else {
			doc = Document.parse(json);
		}

		doc.put("_dl_ts_", timestamp);
		//doc.put("_dl_type_", topic.getName());
		if (storeRaw) {
			doc.put("_dl_text_", text);
		}

		return doc;
	}

	public void saveDocuments(String topic, List<Document> docs) {
		MongoCollection<Document> collection = mongoCollectionMap.computeIfAbsent(topic, k -> database.getCollection(k));
		collection.insertMany(docs);

		log.debug("saved text to topic = {}, topic total count = {} ", topic, collection.countDocuments());
	}

}
